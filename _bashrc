# bash completion
[ -f /usr/local/etc/bash_completion ] && source /usr/local/etc/bash_completion

# prompt
_bashrc_set_prompt () {
  local st=$?  # save the latest exit status

  # ANSI cheatsheet
  # 1: bold
  # 4: underlined
  # 7: reversed
  # 3[0-7]: set normal foreground color (0=K 1=R 2=G 3=Y 4=B 5=M 6=C 7=W)
  # 4[0-7]: set normal background color
  # 9[0-7]: set bright foreground color
  # 10[0-7]: set bright background color

  # styles (tweaked for Solarized with dark background)
  local _reset="\[\e[0m\]"
  local _error="\[\e[1;7;31m\]"
  local _arrow="\[\e[96m\]"
  local _info="\[\e[1;96m\]"
  local _git="\[\e[7;95m\]" git_boxed=1  # boxed purple
  #local _git="\[\e[1;91m\]" git_boxed=   # bold orange

  # glyphs (Terminal.app: Fantasque Sans Mono 14, line spacing 0.8)
  local arrow1="${_arrow}╭${_reset}"
  local arrow2="${_arrow}╰─>${_reset}"
  local ellipsis="${_arrow}…${_reset}"
  #local box_l='▌' box_sep='│' box_r='▐'
  local box_l='▌' box_sep='|' box_r='▐'
  local gl="${git_boxed:+$box_l}" gr="${git_boxed:+$box_r}"
  GIT_PS1_STATESEPARATOR="$box_sep"

  # sections
  _error_ps1 () { local st=$? ; [ $st -ne 0 ] && printf "$1" $st ; }
  local error="${_error}\$(_error_ps1 \"${box_l}%s${box_r}\")${_reset}"
  local info="${_info}\w${_reset}"
  local git_info="${_git}\$(__git_ps1 \"${gl}%s${gr}\")${_reset}"

  # all together now
  PS1="${_reset}${error}\n${arrow1} ${info} ${git_info}\n${arrow2} "
  PS2=" ${ellipsis}  "
} && _bashrc_set_prompt

# aliases
alias ..='cd ..'
alias ls='ls -G'
alias l='ls'
alias la='ls -A'
alias ll='ls -lh'
alias lla='ll -A'
alias grep='grep --color=auto'
alias rc='mvim ~/.bashrc'

# Git
GIT_PS1_SHOWDIRTYSTATE=1      # *: unstaged, +: staged changes
GIT_PS1_SHOWSTASHSTATE=1      # $: stash is not empty
GIT_PS1_SHOWUNTRACKEDFILES=1  # %: untracked files
GIT_PS1_SHOWUPSTREAM='auto'   # <: behind, >: ahead, <>: diverged, =: same
#GIT_PS1_SHOWCOLORHINTS=1
alias g='git' &&
  complete -o bashdefault -o default -o nospace -F __git_wrap__git_main g
ga () { git add "$@" && git status --branch --short ; }
alias ga.='ga .'
alias gci='git commit --verbose'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl='git log --graph --oneline'
alias gs='git status --branch --short'

# Heroku
export PATH="${PATH}:/usr/local/heroku/bin"

# Homebrew
export PATH="/usr/local/bin:${PATH}"
brew-up () {
  brew update   && echo &&
  brew outdated && echo &&
  brew upgrade  && echo &&
  brew cleanup
}

# Vim
alias e='mvim'
export EDITOR='mvim -f'
mvim () { /usr/local/bin/mvim "$@" >/dev/null ; }

# Mercurial
export LC_ALL='en_US.UTF-8'
export LANG='en_US.UTF-8'

# npm
export PATH="${PATH}:/usr/local/share/npm/bin"

# OS X
alias airports='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s'
alias launchservices-hockenberry='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -seed -r'
alias launchservices-siracusa='/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

# Python
alias py='python'
export PYTHONSTARTUP="${HOME}/.pythonstartup"

# rbenv
eval "$(rbenv init -)"

# Ruby
alias bx='bundle exec'
alias gems='gem query --remote --name-matches'

# ~/bin
export PATH="${PATH}:${HOME}/bin"

# myriad shell functions
# TODO find their origin(s) and credit the author(s) here

tab () {
  # Runs a command in a new tab in Terminal.app
  local command="cd \\\"$PWD\\\""
  (( $# > 0 )) && command="${command}; $*"
  osascript 2>/dev/null <<EOF
    tell application "System Events"
      tell process "Terminal" to keystroke "t" using command down
      tell application "Terminal" to do script "${command}" in front window
    end tell
EOF
}

pfd () {
  # Prints the path to the current folder of the topmost Finder window
  osascript 2>/dev/null <<EOF
    tell application "Finder"
      return POSIX path of (target of window 1 as alias)
    end tell
EOF
}

pfs () {
  # Prints the paths to all the selected items in the topmost Finder window
  osascript 2>/dev/null <<EOF
    set output to ""
    tell application "Finder" to set the_selection to selection
    set item_count to count the_selection
    repeat with item_index from 1 to count the_selection
      if item_index is less than item_count then set the_delimiter to "\n"
      if item_index is item_count then set the_delimiter to ""
      set output to output & ((item item_index of the_selection as alias)'s POSIX path) & the_delimiter
    end repeat
EOF
}

trash () {
  # Moves files to the Trash
  for path in "$@"; do
    echo "Trashing ${path}"
    local abspath="$(cd "$(dirname "${path}")"; pwd)/$(basename "${path}")"
    osascript -e "tell app \"Finder\" to move the POSIX file \"${abspath}\" to trash" >/dev/null
  done
}

ql () {
  # Shows the contents of files using Quick Look
  (( $# > 0 )) && qlmanage -p $* &>/dev/null
}

cdf () {
  # Changes the current directory to the current folder of the topmost Finder window
  cd "$(pfd)"
}

man-preview () {
  # Displays man pages in Preview.app
  man -t "$@" | open -f -a Preview
}

inf-proxy () {
  [ -z "$1" ] && echo 'usage: inf-proxy [username]' >&2 && return 1
  ssh "${1}@portal.inf.ufrgs.br" -L 3128:power-proxy.inf.ufrgs.br:3128
}

# vim:ft=sh
